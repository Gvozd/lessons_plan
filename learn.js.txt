====== ЗАНЯТИЕ 1 ========
Введение(1.5 часов)
	Оргвопросы: - 2мин
		Добавиться вконтакте, и создать общий чатик для обсуждений
	Введение в JavaScript - 5 мин
		Где выполняется(в чем отличия), и набуя он там нужен?
		Как появился?
		Куда движется?
	Справочники и спецификации - 1 мин
		http://learn.javascript.ru/pre-coding
		http://learn.javascript.ru/
		http://javascript.ru/
	Редакторы для кода - 1 мин
		Только WebStorm, только хардкор
		http://learn.javascript.ru/editor
	Консоль разработчика - 5 мин
		краткая демонстрация консоли Хрома
		включить настройку кэширования
Основы JavaScript
	Привет, мир! - 5 минут
		слайд: базовый пример
		отдельно сказать про кэширование
	Внешние скрипты, порядок исполнения - 5-10
		async - parallel
		defer - series
		слайд: пример кода
		слайд: порядок выполнения, базовая лекция о синхронности/асинхронности
	Структура кода - 3
		команды
		комментарии(важность)
	Современный стандарт, "use strict" - 2мин
		новый стандарт, защита от старых ошибок
		вызов из начала файла, либо начала функции
	Переменные - 5
		аналогия коробочек-записочек
		[a-zA-Z_$], регистр важен
		var: объявление переменной vs объявление с присваиванием vs присваивание
	Правильный выбор имени переменной - 10
		мини-лекция, что программы пишутся не для компьютера, а для людей
		CONSTANTY
		camelCase
		только английский, только внятные названия(кроме i, j, k, foo, bar, baz)
	Шесть типов данных, typeof - 10/59
		number
		string
		boolean
		null
		undefined
		object//потом - подробнее
		function//потом - подробнее
		TODO - внятную аналогию для отличий null от undefined
	Основные операторы - 25/86
		унарный/бинарный, операнд
		слайды: проработать
		план - допроработать
=============================================
	Операторы сравнения и логические значения
	Побитовые операторы???
	Взаимодействие с пользователем: alert, prompt, confirm
	Условные операторы: if, '?'
	Логические операторы
	Преобразование типов для примитивов
	Циклы while, for
	Конструкция switch
	Функции
	Функциональные выражения
	Рекурсия, стек
	Именованные функциональные выражения
	Всё вместе: особенности JavaScript
Качество кода
	Отладка в браузере Chrome
	Советы по стилю кода
	Как писать неподдерживаемый код?
	Автоматические тесты при помощи chai и mocha
Структуры данных
	Введение в методы и свойства
	Числа
	Строки
	Объекты как ассоциативные массивы
	Объекты: перебор свойств
	Объекты: передача по ссылке
	Массивы с числовыми индексами
	Массивы: методы
	Массив: перебирающие методы
	Псевдомассив аргументов "arguments"
	Дата и Время
Замыкания, область видимости
	Глобальный объект
	Замыкания, функции изнутри
	[[Scope]] для new Function
	Локальные переменные для объекта
	Модули через замыкания
	Управление памятью в JavaScript
	Устаревшая конструкция "with"
Методы объектов и контекст вызова
	Методы объектов, this
	Преобразование объектов: toString и valueOf
	Создание объектов через "new"
	Дескрипторы, геттеры и сеттеры свойств
	Статические и фабричные методы
	Явное указание this: "call", "apply"
	Привязка контекста и карринг: "bind"
	Функции-обёртки, декораторы
Некоторые другие возможности
	Типы данных: [[Class]], instanceof и утки
	Формат JSON, метод toJSON
	setTimeout и setInterval
	Запуск кода из строки: eval
	Перехват ошибок, "try..catch"
ООП в функциональном стиле
	Введение
	Внутренний и внешний интерфейс
	Геттеры и сеттеры
	Функциональное наследование
ООП в прототипном стиле
	Прототип объекта
	Свойство F.prototype и создание объектов через new
	Встроенные "классы" в JavaScript
	Свои классы на прототипах
	Наследование классов в JavaScript
	Проверка класса: "instanceof"
	Свои ошибки, наследование от Error
	Примеси
