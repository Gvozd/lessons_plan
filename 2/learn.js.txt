=============================================
сказать о важности самообучения
+ чтобы нужно хорошо отрабатывать самостоятельно
+ чтобы задавали вопросы в перерывах между лекциями
+ объяснить что важно не столько лекции(которые являются вольным пересказом существующих уроков)
а является важным возможность задать вопрос в промежутках между лекций
TODO - в дальнейшем это перенести в первый урок
=============================================
	Операторы сравнения и логические значения
		https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare
		1 + 5 + 5 + 5 + 5 + 5 = 20-25 мин
	Побитовые операторы???
		может быть позже, если хватит времени
	Взаимодействие с пользователем: alert, prompt, confirm
		3мин
	Условные операторы: if, '?'
		10-15мин
	Логические операторы
		5-10мин(50-55мин)
	Преобразование типов для примитивов
		5
	Циклы while, for
		15-20
	Конструкция switch
		10
	Функции
	Функциональные выражения
	Рекурсия, стек
	Именованные функциональные выражения
	Всё вместе: особенности JavaScript
Качество кода
	Отладка в браузере Chrome
	Советы по стилю кода
	Как писать неподдерживаемый код?
	Автоматические тесты при помощи chai и mocha
Структуры данных
	Введение в методы и свойства
	Числа
	Строки
	Объекты как ассоциативные массивы
	Объекты: перебор свойств
	Объекты: передача по ссылке
	Массивы с числовыми индексами
	Массивы: методы
	Массив: перебирающие методы
	Псевдомассив аргументов "arguments"
	Дата и Время
Замыкания, область видимости
	Глобальный объект
	Замыкания, функции изнутри
	[[Scope]] для new Function
	Локальные переменные для объекта
	Модули через замыкания
	Управление памятью в JavaScript
	Устаревшая конструкция "with"
Методы объектов и контекст вызова
	Методы объектов, this
	Преобразование объектов: toString и valueOf
	Создание объектов через "new"
	Дескрипторы, геттеры и сеттеры свойств
	Статические и фабричные методы
	Явное указание this: "call", "apply"
	Привязка контекста и карринг: "bind"
	Функции-обёртки, декораторы
Некоторые другие возможности
	Типы данных: [[Class]], instanceof и утки
	Формат JSON, метод toJSON
	setTimeout и setInterval
	Запуск кода из строки: eval
	Перехват ошибок, "try..catch"
ООП в функциональном стиле
	Введение
	Внутренний и внешний интерфейс
	Геттеры и сеттеры
	Функциональное наследование
ООП в прототипном стиле
	Прототип объекта
	Свойство F.prototype и создание объектов через new
	Встроенные "классы" в JavaScript
	Свои классы на прототипах
	Наследование классов в JavaScript
	Проверка класса: "instanceof"
	Свои ошибки, наследование от Error
	Примеси
